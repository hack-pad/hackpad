{"version":3,"sources":["Compat.js","Loading.js","WebAssembly.js","Hackpad.js","ColorScheme.js","Editor.js","Terminal.js","App.js","serviceWorker.js","index.js"],"names":["md","MobileDetect","window","navigator","userAgent","browserName","vendor","match","knownWorkingBrowsers","isCompatibleBrowser","mobile","includes","Compat","className","arr","length","commaDelimited","slice","join","joinOr","Loading","percentage","undefined","Math","round","WebAssembly","instantiateStreaming","resp","importObject","a","arrayBuffer","source","instantiate","Go","overlayProgress","progressListeners","startTime","Date","getTime","go","fetch","cmd","env","run","instance","hackpad","fs","console","debug","ready","mkdir","promisify","mode","overlayIndexedDB","cache","recursive","overlayTarGzip","persist","skipCacheDirs","progress","forEach","c","initOnce","init","install","name","args","spawn","process","wait","pid","child_process","Promise","resolve","reject","err","options","subprocess","error","Error","fn","newArgs","push","results","listenColorScheme","light","dark","mq","matches","observeTheme","getMedia","matchMedia","addListener","newEditor","elem","onEdit","editor","CodeMirror","theme","lineNumbers","indentUnit","indentWithTabs","viewportMargin","Infinity","setOption","on","addEventListener","e","focus","target","setCursor","line","lineCount","getContents","getValue","setContents","contents","setValue","getCursorIndex","getCursor","ch","setCursorIndex","index","newTerminal","fitAddon","FitAddon","term","XTerminal","loadAddon","background","foreground","cursor","open","fit","fontSize","parseFloat","getComputedStyle","ResizeObserver","parent","parentNode","observer","classList","contains","unobserve","observe","App","React","useState","setPercentage","loading","setLoading","useEffect","callback","all","then","id","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5c913b54.chunk.js","sourcesContent":["import React from 'react';\nimport './Compat.css';\nimport MobileDetect from 'mobile-detect';\n\n\nconst md = new MobileDetect(window.navigator.userAgent);\nlet browserName = \"\"\nif (window.navigator.vendor.match(/google/i)) {\n  browserName = 'Chrome'\n} else if (navigator.userAgent.match(/firefox\\//i)) {\n  browserName = 'Firefox'\n}\nconst knownWorkingBrowsers = [\n  'Chrome',\n  'Firefox',\n]\nconst isCompatibleBrowser = md.mobile() === null && knownWorkingBrowsers.includes(browserName)\n\nexport default function Compat() {\n  if (isCompatibleBrowser) {\n    return null\n  }\n  return (\n    <div className=\"compat\">\n      <p>Hackpad may not work reliably in your browser.</p>\n      <p>If you're experience any issues, try a recent version of {joinOr(knownWorkingBrowsers)} on a device with enough memory, like a PC.</p>\n    </div>\n  )\n}\n\nfunction joinOr(arr) {\n  if (arr.length === 1) {\n    return arr[0]\n  }\n  if (arr.length === 2) {\n    return `${arr[0]} or ${arr[1]}`\n  }\n\n  const commaDelimited = arr.slice(0, arr.length - 1).join(\", \")\n  return `${commaDelimited}, or ${arr[arr.length - 1]}`\n}\n","import React from 'react';\nimport './Loading.css';\n\n\nexport default function Loading({ percentage }) {\n  return (\n    <div className=\"app-loading\">\n      <div className=\"app-loading-center\">\n        <div className=\"app-loading-spinner\">\n          { percentage !== undefined ?\n            <span className=\"app-loading-percentage\">{Math.round(percentage)}%</span>\n          : null }\n          <span className=\"fa fa-spin fa-circle-notch\" />\n        </div>\n        <p>\n          installing <span className=\"app-title\">\n            <span className=\"app-title-hack\">hack</span><span className=\"app-title-pad\">pad</span>\n          </span>\n        </p>\n        <p><em>please wait...</em></p>\n      </div>\n    </div>\n  )\n}\n","// WebAssembly plus polyfills\n\nif (!WebAssembly.instantiateStreaming) { // polyfill\n  WebAssembly.instantiateStreaming = async (resp, importObject) => {\n    const source = await (await resp).arrayBuffer();\n    return await WebAssembly.instantiate(source, importObject);\n  };\n}\n\nexport default WebAssembly;\n","import WebAssembly from './WebAssembly';\nimport 'whatwg-fetch';\n\nconst Go = window.Go; // loaded from wasm_exec.js script in index.html\n\nlet overlayProgress = 0;\nlet progressListeners = [];\n\nasync function init() {\n  const startTime = new Date().getTime()\n  const go = new Go();\n  const cmd = await WebAssembly.instantiateStreaming(fetch(`wasm/main.wasm`), go.importObject)\n  go.env = {\n    'GOMODCACHE': '/home/me/.cache/go-mod',\n    'GOPROXY': 'https://proxy.golang.org/',\n    'GOROOT': '/usr/local/go',\n    'HOME': '/home/me',\n    'PATH': '/bin:/home/me/go/bin:/usr/local/go/bin/js_wasm:/usr/local/go/pkg/tool/js_wasm',\n  }\n  go.run(cmd.instance)\n  const { hackpad, fs } = window\n  console.debug(`hackpad status: ${hackpad.ready ? 'ready' : 'not ready'}`)\n\n  const mkdir = promisify(fs.mkdir)\n  await mkdir(\"/bin\", {mode: 0o700})\n  await hackpad.overlayIndexedDB('/bin', {cache: true})\n  await hackpad.overlayIndexedDB('/home/me')\n  await mkdir(\"/home/me/.cache\", {recursive: true, mode: 0o700})\n  await hackpad.overlayIndexedDB('/home/me/.cache', {cache: true})\n\n  await mkdir(\"/usr/local/go\", {recursive: true, mode: 0o700})\n  await hackpad.overlayTarGzip('/usr/local/go', 'wasm/go.tar.gz', {\n    persist: true,\n    skipCacheDirs: [\n      '/usr/local/go/bin/js_wasm',\n      '/usr/local/go/pkg/tool/js_wasm',\n    ],\n    progress: percentage => {\n      overlayProgress = percentage\n      progressListeners.forEach(c => c(percentage))\n    },\n  })\n\n  console.debug(\"Startup took\", (new Date().getTime() - startTime) / 1000, \"seconds\")\n}\n\nconst initOnce = init(); // always wait on this to ensure hackpad window object is ready\n\nexport async function install(name) {\n  await initOnce\n  return window.hackpad.install(name)\n}\n\nexport async function run(name, ...args) {\n  const process = await spawn({ name, args })\n  return await wait(process.pid)\n}\n\nexport async function wait(pid) {\n  await initOnce\n  const { child_process } = window\n  return await new Promise((resolve, reject) => {\n    child_process.wait(pid, (err, process) => {\n      if (err) {\n        reject(err)\n        return\n      }\n      resolve(process)\n    })\n  })\n}\n\nexport async function spawn({ name, args, ...options }) {\n  await initOnce\n  const { child_process } = window\n  return await new Promise((resolve, reject) => {\n    const subprocess = child_process.spawn(name, args, options)\n    if (subprocess.error) {\n      reject(new Error(`Failed to spawn command: ${name} ${args.join(\" \")}: ${subprocess.error}`))\n      return\n    }\n    resolve(subprocess)\n  })\n}\n\nexport async function spawnTerminal(term, options) {\n  await initOnce\n  const { hackpad } = window\n  return hackpad.spawnTerminal(term, options)\n}\n\nexport async function mkdirAll(path) {\n  await initOnce\n  const { fs } = window\n  fs.mkdirSync(path, { recursive: true, mode: 0o755 })\n}\n\nexport function observeGoDownloadProgress(callback) {\n  progressListeners.push(callback)\n  callback(overlayProgress)\n}\n\nfunction promisify(fn) {\n  return (...args) => {\n    return new Promise((resolve, reject) => {\n      const newArgs = [...args]\n      newArgs.push((err, ...results) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(results)\n        }\n      })\n      fn(...newArgs)\n    })\n  }\n}\n","\n\nexport function listenColorScheme({ light, dark }) {\n  const fn = mq => {\n    const darkTheme = mq.matches\n    if (darkTheme) {\n      dark()\n    } else {\n      light()\n    }\n  }\n  observeTheme(fn)\n  fn(getMedia())\n}\n\nfunction getMedia() {\n  return window.matchMedia(\"(prefers-color-scheme: dark)\")\n}\n\nfunction init() {\n  if (! window.matchMedia) {\n    return () => false\n  }\n  return fn => getMedia().addListener(fn)\n}\n\nconst observeTheme = init();\n","import CodeMirror from 'codemirror/lib/codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material-darker.css';\nimport 'codemirror/mode/go/go';\n\nimport { listenColorScheme } from './ColorScheme';\nimport './Editor.css';\n\nexport function newEditor(elem, onEdit) {\n  const editor = CodeMirror(elem, {\n    mode: \"go\",\n    theme: \"default\",\n    lineNumbers: true,\n    indentUnit: 4,\n    indentWithTabs: true,\n    viewportMargin: Infinity,\n  })\n  listenColorScheme({\n    light: () => editor.setOption(\"theme\", \"default\"),\n    dark: () => editor.setOption(\"theme\", \"material-darker\"),\n  })\n  editor.on('change', onEdit)\n\n  elem.addEventListener('click', e => {\n    editor.focus()\n    if (e.target === elem) {\n      // If we've clicked outside the code editor area, then it must be the bottom empty space.\n      editor.setCursor({ line: editor.lineCount()-1 })\n    }\n  })\n  return {\n    getContents() {\n      return editor.getValue()\n    },\n\n    setContents(contents) {\n      editor.setValue(contents)\n    },\n\n    getCursorIndex() {\n      return editor.getCursor().ch\n    },\n\n    setCursorIndex(index) {\n      editor.setCursor({ ch: index })\n    },\n  }\n}\n","import React from 'react';\n\nimport 'xterm/css/xterm.css';\nimport { Terminal as XTerminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { listenColorScheme } from './ColorScheme';\n\nexport default function Terminal({ args, ...props }) {\n  const elem = React.useRef(null)\n  React.useEffect(() => {\n    if (elem) {\n      newTerminal(elem)\n    }\n  }, [elem])\n\n  return <div ref={elem} {...props} />\n}\n\nconst fontScale = 0.85\n\nexport function newTerminal(elem) {\n  const fitAddon = new FitAddon()\n  const term = new XTerminal({\n  })\n  term.loadAddon(fitAddon)\n\n  const dark = \"rgb(33, 33, 33)\"\n  const light = \"white\"\n  listenColorScheme({\n    light: () => term.setOption('theme', {\n      background: light,\n      foreground: dark,\n      cursor: dark,\n    }),\n    dark: () => term.setOption('theme', {\n      background: dark,\n      foreground: light,\n      cursor: light,\n    }),\n  })\n\n  term.open(elem)\n  term.setOption('cursorBlink', true)\n  term.focus()\n  const fit = () => {\n    const fontSize = parseFloat(getComputedStyle(elem).fontSize)\n    term.setOption('fontSize', fontSize * fontScale)\n    fitAddon.fit()\n  }\n\n  fit()\n  if (window.ResizeObserver) {\n    const parent = elem.parentNode\n    const observer = new ResizeObserver(() => {\n      if (! elem.parentNode) {\n        // elem removed from DOM\n        observer.unobserve(parent)\n        return\n      }\n      if (elem.classList.contains(\"active\")) {\n        fit()\n      }\n    })\n    observer.observe(parent)\n  } else {\n    window.addEventListener('resize', fit)\n  }\n  return term\n}\n","import React from 'react';\nimport './App.css';\n\nimport './Tabs.css';\nimport \"@fontsource/roboto\";\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport Compat from './Compat';\nimport Loading from './Loading';\nimport { install, run, observeGoDownloadProgress } from './Hackpad';\nimport { newEditor } from './Editor';\nimport { newTerminal } from './Terminal';\n\nfunction App() {\n  const [percentage, setPercentage] = React.useState(0);\n  const [loading, setLoading] = React.useState(true);\n  React.useEffect(() => {\n    observeGoDownloadProgress(setPercentage)\n\n    window.editor = {\n      newTerminal,\n      newEditor,\n    }\n    Promise.all([ install('editor'), install('sh') ])\n      .then(() => {\n        run('editor', '--editor=editor')\n        setLoading(false)\n      })\n  }, [setLoading, setPercentage])\n\n  return (\n    <>\n      { loading ? <>\n        <Compat />\n        <Loading percentage={percentage} />\n      </> : null }\n      <div id=\"app\">\n        <div id=\"editor\"></div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}